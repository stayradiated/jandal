{"name":"Jandal","tagline":"Manage sockets using events, callbacks and rooms","body":"Jandal\r\n======\r\n\r\nEvent handler for [SockJS](https://github.com/sockjs/sockjs-node).\r\n\r\n## Important\r\n\r\nJandal will allow you to emit a maximum of three arguments. This is purely to\r\nimprove performance in most browsers and in nodejs.\r\n\r\nThere is the\r\n[multi-args branch](https://github.com/stayradiated/jandal/multi-args)\r\nbranch - but it is not kept up to date. If you need to use more than three\r\nargs, open an issue and we can sort something out.\r\n\r\n## Usage\r\n\r\n### Server\r\n\r\n```javascript\r\nvar http, Jandal, sockjs, server, conn;\r\n\r\nhttp   = require('http');\r\nJandal = require('jandal');\r\nsockjs = require('sockjs');\r\n\r\n// standard sockjs stuff\r\nserver = http.createServer();\r\nconn = sockjs.createServer();\r\nconn.installHandlers(server, { prefix: '/socket' });\r\n\r\n// Handle new connections\r\nconn.on('connection', function (socket) {\r\n\r\n    // wrap a socket in a jandal\r\n    jandal = new Jandal(socket, 'stream');\r\n\r\n    // bind jandal events\r\n    jandal.on('echo', function (text, fn) {\r\n        fn('server: ' + text);\r\n    });\r\n\r\n});\r\n\r\n// Start server\r\nserver.listen(8080);\r\n```\r\n\r\n## Client\r\n\r\n```javascript\r\nvar conn, socket;\r\n\r\n// use browserify\r\n// or load the libraries as seperate scripts\r\nrequire('sockjs');\r\nrequire('jandal/client');\r\n\r\nconn = new SockJS('http://localhost:8080/socket');\r\nsocket = new Jandal(conn, 'websocket');\r\n\r\n// Wait for socket to connect\r\nsocket.on('socket.open', function () {\r\n\r\n    // Send a message to the server with a callback\r\n    socket.emit('echo', 'hello', function (reply) {\r\n        console.log(reply); //=> \"server: hello\"\r\n    });\r\n\r\n});\r\n```\r\n\r\n# Documentation\r\n\r\n## Jandal: Class\r\n\r\nThe `Jandal` class has a couple of static properties useful for managing\r\nconnected sockets.\r\n\r\n### Jandal.all\r\n\r\nThis is a `Room` instance that holds all the connected sockets. See the `Room`\r\ndocs for more info.\r\n\r\n**Example:**\r\n\r\n```javascript\r\n// Emitting\r\nJandal.all.emit('hello', 1, 2,3);\r\n\r\n// Broadcasting\r\nJandal.all.broadcast('socket-id', 'hello', 1, 2, 3);\r\n```\r\n\r\n### Jandal.in(room)\r\n\r\nEasily access any sockets in any room. See the `Room` docs for more info.\r\n\r\n**Parameters:**\r\n\r\n- room (string) : the name of the room\r\n\r\n**Example:**\r\n\r\n```javascript\r\nJandal.in('my-room').emit('hello');\r\n```\r\n\r\n## Jandal: Instance\r\n\r\nEvery Jandal instance extends the NodeJS EventEmitter so you can also use\r\nmethods like: `once`, `removeAllListeners` and `setMaxListeners`. See the\r\n[EventEmitter docs](http://nodejs.org/api/events.html) for more information.\r\n\r\n### jandal.rooms\r\n\r\nAn array that holds all the rooms the socket is currently joined to.\r\n\r\n### jandal.connect(socket, handle)\r\n\r\n**Parameters:**\r\n\r\n- socket (object) : an object that represents a socket\r\n- handle (string|object) : a handle name or an object to use as a handle\r\n\r\n**Example:**\r\n\r\n```javascript\r\nvar jandal, conn;\r\n\r\njandal = new Jandal();\r\nconn = new SockJS(config.url);\r\n\r\njandal.connect(conn, 'websocket');\r\n```\r\n\r\n**Example with custom handles:**\r\n\r\n```javascript\r\nvar jandal, handle, socket;\r\n\r\njandal = new Jandal();\r\n\r\nsocket = new EventEmitter();\r\n\r\nhandle = {\r\n    write: function (socket, message) {\r\n        socket.emit('message', message);\r\n    },\r\n    onread: (socket, fn) {\r\n        socket.on('message', fn);\r\n    },\r\n    ...\r\n};\r\n\r\njandal.connect(socket, handle);\r\n```\r\n\r\n\r\n### jandal.emit(event, arg1, arg2, arg3)\r\n\r\nThis is very similar to the NodeJS EventEmitter, but you are limited to three\r\narguments.\r\n\r\n**Parameters:**\r\n\r\n- event (string) : the event to emit\r\n- arg1 (dynamic)\r\n- arg2 (dynamic)\r\n- arg3 (dynamic)\r\n\r\nArguments can be strings, numbers, booleans, dates, objects, arrays, etc...\r\nBasically anything that `JSON.stringify` can handle.\r\n\r\n**Callbacks:**\r\n\r\nYou can also send one function for use as a callback.\r\n\r\n- It must always be passed as the last argument.\r\n- Callbacks will only be run once.\r\n- They can take 0 to 3 arguments.\r\n\r\n**Example:**\r\n\r\n```javascript\r\nvar jandal;\r\njandal = new Jandal();\r\n\r\n// lots of different data types\r\njandal.emit('my-event', 'arg 1', ['arg 2'], {arg: 3})\r\n\r\n// passing functions as callbacks\r\njandal.emit('my-callback', 'some data', function (response) {\r\n    console.log('running the callback with', response);\r\n});\r\n```\r\n\r\n\r\n### jandal.on(event, listener)\r\n\r\nWorks very similar to the EventEmitter.\r\n\r\nHowever, watch out for namespaces. Listening for `namespace.event` will not\r\nwork. You need to get the namespace?\r\n\r\n**Parameters:**\r\n\r\n- event (string) : event to listen for\r\n- listener (function) : function to run when the event is emitted\r\n\r\n**Example:**\r\n\r\n```javascript\r\njandal.on('my-event', function (arg1, arg2, arg3) {\r\n    console.log('\"my-event\" has been emitted with', arguments);\r\n});\r\n\r\n// listening for a namespace + event\r\njandal.on('task.create', listener);\r\n\r\n// this is the same as\r\njandal.namespace('task').on('create', listener);\r\n```\r\n\r\n### jandal.namespace(name)\r\n\r\nReturn a new Namespace instance. If the namespace already exists, it will\r\nuse that instead of creating a new one. See the `Namespace` docs for more info.\r\n\r\n**Parameters:**\r\n\r\n- name (string) : namespace name\r\n\r\n**Example:**\r\n\r\n```javascript\r\nvar jandal, ns;\r\n\r\njandal = new Jandal();\r\nns = jandal.namespace('app');\r\n\r\n// sends \"app.hello()\"\r\nns.emit('hello');\r\n\r\n// listens for \"app.goodbye\"\r\nns.on('goodbye', function () {\r\n    console.log('bye');\r\n});\r\n```\r\n\r\n### jandal.join(room)\r\n\r\nPut the socket in a room.\r\n\r\n**Parameters:**\r\n\r\n- room (string) : name of the room\r\n\r\n**Example:**\r\n\r\n```javascript\r\njandal.join('my-room');\r\n```\r\n\r\n### jandal.leave(room)\r\n\r\nRemove the socket from a room.\r\n\r\n**Parameters:**\r\n\r\n- room (string) : name of the room\r\n\r\n**Example:**\r\n\r\n```javascript\r\njandal.leave('my-room');\r\n```\r\n\r\n### jandal.room(room)\r\n\r\nReturns a room. Same as `Jandal.in`.\r\n\r\n**Parameters:**\r\n\r\n- room (string) : name of the room\r\n\r\n**Example:**\r\n\r\n```javascript\r\n// add the socket to the room\r\njandal.join('my-room');\r\n\r\n// get the room\r\nvar room = jandal.room('my-room');\r\n\r\n// emit to all the sockets in the room\r\nroom.emit('hello');\r\n```\r\n\r\n### jandal.release()\r\n\r\nRemove the socket from all the rooms it is currently in.\r\n\r\n**Example:**\r\n\r\n```javascript\r\njandal.release();\r\n```\r\n\r\n## Protocol\r\n\r\nJandal uses a simple protocol for encoding messages. It's based on the\r\njavascript syntax for objects and functions. Arguments are encoded using\r\nJSON.stringify.\r\n\r\nThere are four parts to a message:\r\n\r\n- namespace\r\n- event\r\n- args\r\n- callback\r\n\r\nThe namespace and callback are both optional.\r\n\r\n**Example messages:**\r\n\r\n```javascript\r\n// event + single arg\r\nfetch(\"info\")\r\n\r\n// event + multiple args\r\nfetch(\"info\",{\"count\":40})\r\n\r\n// event + arg + callback\r\nfetch(\"info\").fn(10)\r\n\r\n// namespace + event + arg\r\nuser.load(\"numbers\",[10,20,30])\r\n\r\n// namespace + event + arg + callback\r\ntask.create({\"name\":\"this is a new task\"}).fn(1)\r\n```\r\n\r\n**Callbacks:**\r\n\r\nEach message can have a single callback. The callback must be the last\r\narguments, and can only be called once.\r\n\r\nCallbacks are just like regular events, so you can also have a callback\r\non a callback.\r\n\r\n```javascript\r\n// send a message with a callback\r\napp.login('username', 'password').fn(32)\r\n\r\n// response running the callback with args\r\nsocket.fn_23({login: success})\r\n\r\n// callback with a callback\r\nsocket.fn_24({login: fail}).fn(25)\r\n```\r\n\r\n\r\n## Room: Instance\r\n\r\nRooms are just a collection of sockets. You can add or remove sockets from\r\nthem, and emit events to all sockets in that room, or broadcast events from a\r\nsocket to all other sockets.\r\n\r\nEvery socket is added to the 'all' room, which can be acessed through\r\n`Jandal.all`.\r\n\r\n### room.length()\r\n\r\nReturns the number of connected sockets in a room.\r\n\r\n**Example:**\r\n\r\n```javascript\r\nJandal.in('my-room').length();\r\n```\r\n\r\n### room.join(jandal)\r\n\r\nAdd a jandal to a room.\r\n\r\n**Parameters:**\r\n\r\n- jandal (Jandal) : an instance of a Jandal\r\n\r\n**Example:**\r\n\r\n```javascript\r\njandal = new Jandal();\r\nJandal.in('my-room').join(jandal);\r\n```\r\n\r\n### room.leave(jandal)\r\n\r\nRemove a jandal from a room.\r\n\r\n**Parameters:**\r\n\r\n- jandal (Jandal) : an instance of a Jandal\r\n\r\n**Example:**\r\n\r\n```javascript\r\njandal = new Jandal();\r\nJandal.in('my-room').leave(jandal);\r\n```\r\n\r\n### room.contains(jandal)\r\n\r\nCheck if a socket is in a room. Returns `true` or `false`.\r\n\r\n**Parameters**\r\n\r\n- jandal (Jandal) : an instance of a Jandal\r\n\r\n**Example:**\r\n\r\n```javascript\r\nvar a, b;\r\n\r\na = new Jandal();\r\na.join('my-room');\r\n\r\nb = new Jandal();\r\n\r\nJandal.in('my-room').contains(a); // true\r\nJandal.in('my-room').contains(b); // false\r\n```\r\n\r\n### room.emit(event, arg1, arg2, arg3)\r\n\r\nExactly the same as `jandal.emit` but will be sent to all connected sockets.\r\n\r\n**Parameters:**\r\n\r\n- event (string) : name of the event\r\n- arg1 (dynamic)\r\n- arg2 (dynamic)\r\n- arg3 (dynamic)\r\n\r\n**Example:**\r\n\r\n```javascript\r\nJandal.in('my-room').emit('hello', 1, 2, 3);\r\n```\r\n\r\n### room.broadcast(sender, event, arg1, arg2, arg3)\r\n\r\nJust like emit, but will not send to the 'sender' socket.\r\n\r\n**Parameters:**\r\n\r\n- sender (dynamic)\r\n- event (string)\r\n- arg1 (dynamic)\r\n- arg2 (dynamic)\r\n- arg3 (dynamic)\r\n\r\n**Example:**\r\n\r\n```javascript\r\nJandal.in('my-room').broadcast('some-id', 'bye', 1, 2, 3);\r\n```\r\n\r\n### room.namespace(name)\r\n\r\nGet a namespace for a room.\r\n\r\n**Parameters:**\r\n\r\n- name (string) : the name of the namespace\r\n\r\n**Example:**\r\n\r\n```javascript\r\nJandal.in('my-room').namespace('tasks').emit('create', 'something');\r\n```\r\n\r\n### room.destroy()\r\n\r\nDestroy all sockets in a room\r\n\r\n```javascript\r\nJandal.in('my-room').destroy()\r\n```\r\n\r\n# Using Rooms\r\n\r\nAdding a socket to a room.\r\n\r\n    sock = new Jandal(socket);\r\n    sock.join('my_room');\r\n\r\nRemoving a socket from a room\r\n\r\n    sock.leave('my_room');\r\n\r\nEmitting to all sockets\r\n\r\n    Jandal.all.emit('message');\r\n\r\nEmitting to all sockets in a room\r\n\r\n    Jandal.all.in('my_room').emit('message');\r\n\r\n    // Alternative\r\n    sock.in('my_room').emit('message');\r\n\r\nBroadcasting to all the other sockets\r\n\r\n    sock.broadcast('hi everyone');\r\n\r\nBroadcasting to other sockets in a room\r\n\r\n    sock.broadcast.to('my_room').emit('a new socket has joined');\r\n\r\n## Browsers\r\n\r\nThe same code can be run in the browser by using Browserify.\r\n\r\nThis also allows you to use the library to communicate between servers, as it\r\nacts as the client and the server.\r\n\r\nTo compile for the browser:\r\n\r\n    npm run-script build\r\n\r\nAnd then either copy/paste the `client.js` file into your project, or\r\ninclude it via `require('jandal/client');`.\r\n\r\n## Changelog\r\n\r\n### 0.0.15\r\n\r\n- When broadcasting from a socket, check `socket.id !== sender` instead of\r\n  `socket !== sender`. This requires all sockets to have an 'id' attribute.\r\n- Use the `socket` namespace instead of `Jandal` for handling callbacks.\r\n- Make `serialize` and `parse` private methods of a Jandal instance.\r\n- Make `namespaces` and `callbacks` private properties of a Jandal instance.\r\n- Remove `Room.prototype.in`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}